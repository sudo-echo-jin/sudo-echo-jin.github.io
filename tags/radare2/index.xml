<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>radare2 on Jin&#39;s Exploit Repo</title>
        <link>https://sudo-echo-jin.github.io/tags/radare2/</link>
        <description>Recent content in radare2 on Jin&#39;s Exploit Repo</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 28 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://sudo-echo-jin.github.io/tags/radare2/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Behind the Scenes</title>
        <link>https://sudo-echo-jin.github.io/p/scene/</link>
        <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate>
        
        <guid>https://sudo-echo-jin.github.io/p/scene/</guid>
        <description>&lt;img src="https://sudo-echo-jin.github.io/p/scene/scene.jpg" alt="Featured image of post Behind the Scenes" /&gt;&lt;p&gt;Cover photo by &lt;a class=&#34;link&#34; href=&#34;https://unsplash.com/@liammcgarry&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://unsplash.com/@liammcgarry&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;scenario&#34;&gt;Scenario&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;After struggling to secure our secret strings for a long time, we finally figured out the solution to our problem: Make decompilation harder. It should now be impossible to figure out how our programs work!&amp;rdquo; - HTB challenge&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;lets-begin&#34;&gt;Let&amp;rsquo;s begin&lt;/h1&gt;
&lt;p&gt;Extract the zip file, and we get a elf binary.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/a1.png&#34;
	width=&#34;678&#34;
	height=&#34;246&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;275&#34;
		data-flex-basis=&#34;661px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When executed&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/a2.png&#34;
	width=&#34;482&#34;
	height=&#34;231&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;208&#34;
		data-flex-basis=&#34;500px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Giving a sample password does nothing. Tried to give a very long input to check bof, but nothing happened.&lt;/p&gt;
&lt;p&gt;Time to disassemble.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/a3.png&#34;
	width=&#34;732&#34;
	height=&#34;952&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;76&#34;
		data-flex-basis=&#34;184px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This is our main function. One uncommon thing that sticks out is that the function ends with &amp;ldquo;ud2&amp;rdquo; instead of &amp;ldquo;ret&amp;rdquo; or something.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/a4.png&#34;
	width=&#34;1334&#34;
	height=&#34;736&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;435px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However, when we check what&amp;rsquo;s after that ud2 at 0x55b1eeb752e6, we can verify that there are some more codes present in the main function which are not interpreted in the graph mode maybe because of the &amp;ldquo;ud2&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mudongliang.github.io/x86/html/file_module_x86_id_318.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;What is ud2?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It raises the undefined opcode exception and ends the program. Developers use this for various reasons. One example is to hide the code after ud2. Reverse engineering tools won&amp;rsquo;t automatically analyze what&amp;rsquo;s after this instruction, but it doesn&amp;rsquo;t mean that we can&amp;rsquo;t, because the codes are still there.&lt;/p&gt;
&lt;p&gt;Radare2 graph view didn&amp;rsquo;t show us what&amp;rsquo;s after &amp;ldquo;ud2&amp;rdquo; because it doesn&amp;rsquo;t know whether those codes are going to be executed or not. When we are in the default view, it shows the interpreted instructions regardless.&lt;/p&gt;
&lt;p&gt;Reload this binary with the write mode on radare2 and let&amp;rsquo;s remove all those ud2.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/a5.png&#34;
	width=&#34;447&#34;
	height=&#34;371&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;289px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;There are total 15 ud2 instructions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/a6.png&#34;
	width=&#34;336&#34;
	height=&#34;321&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;104&#34;
		data-flex-basis=&#34;251px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Executed the following command 15 times.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; s `/ad ud2~[0]\`; wx 9090
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;What this does is that it navigates to the address where ud2 is, and writes two &amp;rsquo;nop&amp;rsquo; instructions. Two, because the length of ud2 opcode, 0f0b, is two bytes and we have to overwrite exactly the same length to make the program not crash.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/a7.png&#34;
	width=&#34;433&#34;
	height=&#34;907&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;47&#34;
		data-flex-basis=&#34;114px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Coming back into the graph view, radare2 can now interprete the full flow of the program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/a8.png&#34;
	width=&#34;1769&#34;
	height=&#34;540&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;327&#34;
		data-flex-basis=&#34;786px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;From our main function, &lt;code&gt;cmp dword [var_a4h], 2&lt;/code&gt; checks whether we provided the argument to the program. If no argument is provided, it goes to the left box, prints out &amp;ldquo;./challenge &amp;lt;password&amp;gt;&amp;rdquo; message and exits the program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/a9.png&#34;
	width=&#34;1173&#34;
	height=&#34;773&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;364px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now, we are on the right box. In here, &lt;code&gt;cmp rax, 0xc&lt;/code&gt; checks whether our argument&amp;rsquo;s length is 12. If the length is not 12, it goes to the right box and exits the program.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/b1.png&#34;
	width=&#34;1194&#34;
	height=&#34;717&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;399px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume we provided the 12 character long argument and came to the left box. As we can see above, the first three bytes of our argument is being compared to the string &amp;ldquo;Itz&amp;rdquo;. If it matches, we will be sent to the left box. &lt;code&gt;rax&lt;/code&gt; contains our string argument and the program loads three characters long string to &lt;code&gt;rsi&lt;/code&gt; which will be compared against our argument. &lt;code&gt;mov edx, 3&lt;/code&gt; indicates that three bytes will be compared in the &lt;em&gt;strncmp&lt;/em&gt; function. To translate it in python syntax, it&amp;rsquo;s like this &lt;code&gt;rax[0:3] == rsi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/b2.png&#34;
	width=&#34;836&#34;
	height=&#34;720&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;278px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Again, the next three characters are being compared to the string &amp;ldquo;_0n&amp;rdquo;. The only difference is that &lt;code&gt;add rax, 3&lt;/code&gt; is added. This is how it compares next three bytes from our argument. &lt;code&gt;rax[0+3:3+3]&lt;/code&gt; -&amp;gt; &lt;code&gt;rax[3:6] == rsi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And it repeats.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/b3.png&#34;
	width=&#34;648&#34;
	height=&#34;378&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;411px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We see &lt;code&gt;add rax, 6&lt;/code&gt;, which indicates that the next three bytes from the previous one will be comapred to &amp;ldquo;Ly_&amp;rdquo;. &lt;code&gt;rax[0+6:3+6]&lt;/code&gt; -&amp;gt; &lt;code&gt;rax[6:9] == rsi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/b4.png&#34;
	width=&#34;643&#34;
	height=&#34;384&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;167&#34;
		data-flex-basis=&#34;401px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And the last one being compared, this box checks if our last three characters match &amp;ldquo;UD2&amp;rdquo;. &lt;code&gt;rax[9:12] == rsi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/b5.png&#34;
	width=&#34;765&#34;
	height=&#34;668&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;114&#34;
		data-flex-basis=&#34;274px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we pass all the tests, we get a flag from this box and the flag is going to be our argument itself, &lt;code&gt;rax&lt;/code&gt;. To sum up, the 12 bytes long string argument will be &amp;ldquo;Itz_0nly_UD2&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sudo-echo-jin.github.io/p/scene/b6.png&#34;
	width=&#34;417&#34;
	height=&#34;146&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;285&#34;
		data-flex-basis=&#34;685px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We got the flag.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
